Problem Description:



Write a Java program that reads a CV file containing a list of bank transactions and performs the following operations:



    1. Read the CSV file and create a list of "Product' objects, where each object represents a product in the file.

    2. Filter the list of products to include only those with a price greater than a specified value.

    3. Group the products by category and calculate the total value of products in each category.

    4. Calculate the average price of all products in the list.

    5. Find the product with the highest price in the list.

    6. The public methods service class ProductService.java has method skeletons, that you need to update to fulfill above expectations





package com.tasks.problem;




import java.io.BufferedReader;
import java.io.FileReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import com.opencsv.bean.CsvToBean;
import com.opencsv.bean.CsvToBeanBuilder;




public class ProductService {

   
    List<Product> products;

   public List<Product> getAllProducts() {
        if (products != null){
            return products;
        }

        try(Reader reader = new BufferedReader(new FileReader("products.csv"))) {
            CsvToBean<Product> csvToBean = new CsvToBeanBuilder<Product>(reader)
            .withType(Product.class)
            .withIgnoreLeadingWhiteSpace(true)
            .build();

            //@todo write code using OpenCSV to read the file products.csv and marshalling it to list of products.
            products = csvToBean.parse();
            return products;

        } catch (Exception e) {
            throw new RuntimeException("FAILURE_TO_PROCESS_CSV", e);
        }
 
    }




   

    public List<Product> getProductsWithPriceGreaterThan(Double price){

        if(products == null) {
            getAllProducts();
        }

        List<Product> filteredProducts = new ArrayList<>();
        for(Product product : products) {
            if(product.getPrice() > price){
                filteredProducts.add(product);
            }
        }

        //@todo Write code to filter products having price greater than the passed price agrument
        return filteredProducts;
    }

   

    public Double groupByCategoryAndAggregateValue(String category){

        if(products == null) {
            getAllProducts();
        }

        //@todo Write code to group by category argument apssed as method parameter and then retutn the aggregated price of products belonging to the category.

        double tot = 0.0;

        for (Product product : products){
            if(product.getCategory().equals(category)){
                tot += product.getPrice();
            }
        }
        return tot;
    }

   

    public Double calculateAverageOfAllProducts(){

        if(products == null) {
            getAllProducts();
        }

        //@todo Write code to evaluate the average of prices of all products

        double tot = 0.0;

        for(Product product : products){
            tot += product.getPrice();
        }

        return tot / products.size();

    }

   

    public Product findProductWithHighestPrice(){
	
        if(products == null) {
            getAllProducts();
        }

        Product maxProduct = null;

        //@todo Write code to fetch the product with highest price

        for (Product product : products) {
            if(maxProduct == null || product.getPrice() > maxProduct.getPrice()){
                maxProduct = product;
            }
        }

        return maxProduct;

    }

}