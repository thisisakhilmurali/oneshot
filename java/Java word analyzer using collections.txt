package com.tasks.problem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class WordAnalyzerService {
	private String fileData;
	
	private String[] words;
	
	private Set<String> set = new HashSet<String>();
	
	private Map<String, Long> map = new HashMap<String, Long>();
	
	/**
	 * 
	 * @return number of words present in the file words.txt
	 * @throws Exception 
	 */
	public long readFileAndReturnNoOfWords() throws Exception  {
			//@todo Use BufferedReader to read the file and store the words into words variable
			// delete the last new line separator
			try(BufferedReader reader = new BufferedReader(new FileReader("words.txt"))){
				StringBuilder builder = new StringBuilder();
				String line;
				while((line=reader.readLine())!=null){
					builder.append(line);
					builder.append("\n");
				}
				fileData = builder.toString();
				words = fileData.split("\\s+");
				return words.length;
			}
			catch(Exception e){
				e.printStackTrace();
				return -1;
			}
	
	}
	
	/*
	 * 
	 * @return the unique words present in the file. These words should be populated in the set variable declared above.
	 */
	public long createSetOfUniqueWordsAndReturnUniqueCount() throws Exception {
			if(words == null) {
				long wordCount = readFileAndReturnNoOfWords();
				if(wordCount==-1){
					return -1;
				}
			}
		// @todo  Add words to the collection uniquely
		try {
			set.addAll(Arrays.asList(words));
			return set.size();
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
	}
	
	/**
	 * Populate the map variable with key-value mapping of word-count, count representing how many times the word appeared in the file.
	 * @throws Exception
	 */
	public void createMapOfWord_Count() throws Exception {
		if(words == null) {
			long wordCount = readFileAndReturnNoOfWords();
			if(wordCount==-1){
				return;
			}
		}
		//@todo Populate the map variable by writing appropriate code
		try {
			for(String word:words){
				map.put(word, map.getOrDefault(word,0L)+1);
			 }
		} catch (Exception e) {
			e.printStackTrace();
		}
		 
		}
		
	 

	
	/**
	 * 
	 * @param word - input word 
	 * @return the number of times the input word appeared in the file
	 * @throws Exception
	 */
	public long getOccurrencesOf(String word) throws Exception {
		if(map.isEmpty()) {
			createMapOfWord_Count();
		}
		try {
			//@todo Get the count
		return map.getOrDefault(word,0L);
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
	}
	
	/**
	 * 
	 * @return topp 3 words sorted (desc) by number of occurrences in the file
	 * @throws Exception
	 */
	public List<String> findThreeMostCommonWords() throws Exception{
		if(map.isEmpty()){
			createMapOfWord_Count();
		}
		try {
			Map<String,Long> sortedMap = sortByValue(map);
		List<String> result = new ArrayList<>();
		int count = 0;
		for(String word:sortedMap.keySet()){
			if(count>=3){
				break;
			}
			result.add(word);
			count++;
		}
		return result;
		} catch (Exception e) {
			e.printStackTrace();
			return Collections.emptyList();
		}
		
	}
		
	
	/**
	 * Sort the map keys based on key value with most commonly used word at the top.
	 * @param hm
	 * @return
	 */
	private static Map<String, Long>
    sortByValue(Map<String, Long> hm)
    {
		//@todo Sort the map on the basis of value of the key in the Map.
        
		// Creating a list from elements of HashMap
 
        // Sorting the list using Collections.sort() method
        // using Comparator
 
        // putting the  data from sorted list back to hashmap
 
        // returning the sorted HashMap
		
		List<Map.Entry<String,Long>> list = new LinkedList<>(hm.entrySet());
		// Collections.sort(list,new Comparator<Map.Entry<String,Long>>() {
		// 	public int compare(Map.Entry<String,Long> o1,Map.Entry<String,Long> o2){
		// 		return (o2.getValue()).compareTo(o1.getValue());
		// 	}	
		// });
		list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));
		Map<String,Long> sortedMap = new LinkedHashMap<>();
		for(Map.Entry<String,Long> entry: list){
			sortedMap.put(entry.getKey(),entry.getValue());
		}
		return sortedMap;
    }

}
